"""
GUI –¥–ª—è ISO2
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–µ—Å—Ç—Ä–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–∏–∞–ª–æ–≥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import os
from config import PROJECTS_DIR, ACTIVE_DIR, ARCHIVE_DIR, DOCUMENT_TYPES
from logic import (
    scan_folder, find_similar_documents, compare_documents,
    publish_document, parse_filename, build_filename
)


class MainWindow:
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self, root):
        self.root = root
        self.root.title("ISO2 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –°–ú–ö")
        self.root.geometry("1200x700")
        self.root.configure(bg="#2C3E50")

        # –¢–µ–∫—É—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        self.current_folder = PROJECTS_DIR
        self.documents = []

        self.create_widgets()
        self.load_documents()

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        top_frame = tk.Frame(self.root, bg="#37474F")
        top_frame.pack(side=tk.TOP, fill=tk.X, padx=10, pady=10)

        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ (—Ç—ë–º–Ω–æ-—Å–µ—Ä—ã–µ)
        tk.Button(
            top_frame, text="–ü–†–û–ï–ö–¢–´", width=15,
            command=lambda: self.switch_folder(PROJECTS_DIR),
            font=("Arial", 14, "bold"), bg="#4A5568", fg="white",
            activebackground="#5A6678", activeforeground="white",
            relief=tk.RAISED, bd=2
        ).pack(side=tk.LEFT, padx=5)

        tk.Button(
            top_frame, text="–î–ï–ô–°–¢–í–£–Æ–©–ò–ï", width=15,
            command=lambda: self.switch_folder(ACTIVE_DIR),
            font=("Arial", 14, "bold"), bg="#4A5568", fg="white",
            activebackground="#5A6678", activeforeground="white",
            relief=tk.RAISED, bd=2
        ).pack(side=tk.LEFT, padx=5)

        tk.Button(
            top_frame, text="–ê–†–•–ò–í", width=15,
            command=lambda: self.switch_folder(ARCHIVE_DIR),
            font=("Arial", 14, "bold"), bg="#4A5568", fg="white",
            activebackground="#5A6678", activeforeground="white",
            relief=tk.RAISED, bd=2
        ).pack(side=tk.LEFT, padx=5)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        tk.Frame(top_frame, width=30, bg="#37474F").pack(side=tk.LEFT)

        # –ö–Ω–æ–ø–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—á—É—Ç—å —Å–≤–µ—Ç–ª–µ–µ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è)
        self.publish_btn = tk.Button(
            top_frame, text="üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", width=20,
            command=self.open_publish_dialog,
            bg="#546E7A", fg="white", font=("Arial", 14, "bold"),
            activebackground="#607D8B", activeforeground="white",
            relief=tk.RAISED, bd=2
        )
        self.publish_btn.pack(side=tk.LEFT, padx=5)

        # –ú–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
        self.folder_label = tk.Label(
            self.root, text="", font=("Arial", 16, "bold"),
            bg="#455A64", fg="white", anchor="w", padx=10, height=2
        )
        self.folder_label.pack(fill=tk.X, padx=10)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        table_frame = tk.Frame(self.root, bg="#2C3E50")
        table_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # Scrollbar
        scrollbar = tk.Scrollbar(table_frame, bg="#37474F")
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –¥–ª—è Treeview
        style = ttk.Style()
        style.theme_use('default')
        style.configure("Treeview",
                        background="#37474F",
                        foreground="white",
                        fieldbackground="#37474F",
                        font=("Arial", 14),
                        rowheight=35)
        style.configure("Treeview.Heading",
                        background="#2C3E50",
                        foreground="white",
                        font=("Arial", 14, "bold"),
                        relief=tk.FLAT)
        style.map("Treeview",
                  background=[('selected', '#546E7A')],
                  foreground=[('selected', 'white')])

        # Treeview - –û–î–ù–ê –∫–æ–ª–æ–Ω–∫–∞ "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
        columns = ("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞",)
        self.tree = ttk.Treeview(
            table_frame, columns=columns, show="headings",
            yscrollcommand=scrollbar.set
        )
        scrollbar.config(command=self.tree.yview)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–∫–∏
        self.tree.heading("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞", text="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        self.tree.column("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞", width=1100)

        self.tree.pack(fill=tk.BOTH, expand=True)

        # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ - –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
        self.tree.bind('<Double-1>', self.open_document)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_label = tk.Label(
            self.root, text="–ì–æ—Ç–æ–≤", anchor="w",
            bg="#37474F", fg="white", relief=tk.SUNKEN,
            font=("Arial", 14), height=2
        )
        self.status_label.pack(side=tk.BOTTOM, fill=tk.X)

    def switch_folder(self, folder_path):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–∞–ø–∫–∞–º–∏"""
        self.current_folder = folder_path
        self.load_documents()

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ü–†–û–ï–ö–¢–û–í
        if folder_path == PROJECTS_DIR:
            self.publish_btn.config(state=tk.NORMAL)
        else:
            self.publish_btn.config(state=tk.DISABLED)

    def load_documents(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏"""
        self.documents = scan_folder(self.current_folder)

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –ø–∞–ø–∫–∏
        folder_name = os.path.basename(self.current_folder)
        self.folder_label.config(text=f"üìÅ {folder_name} ({len(self.documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.filter_documents()

    def filter_documents(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.tree.get_children():
            self.tree.delete(item)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É
        for doc in self.documents:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
            if self.current_folder == PROJECTS_DIR:
                # –í –ü–†–û–ï–ö–¢–ê–• - –∏–º—è —Ñ–∞–π–ª–∞ –ö–ê–ö –ï–°–¢–¨
                display_name = doc.filename
            else:
                # –í –î–ï–ô–°–¢–í–£–Æ–©–ò–•/–ê–†–•–ò–í - —Å–æ–±—Ä–∞–Ω–Ω–æ–µ –∏–º—è (–ø–∞—Ä—Å–∏–Ω–≥ + —Å–ª–∏—è–Ω–∏–µ)
                if doc.is_valid:
                    display_name = build_filename(doc.typ, doc.kod, doc.version, doc.year, doc.title)
                else:
                    display_name = doc.filename

            self.tree.insert("", tk.END, values=(display_name,), tags=(doc.filename,))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_label.config(text=f"–ü–æ–∫–∞–∑–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(self.documents)}")

    def open_document(self, event):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (–¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫)"""
        selection = self.tree.selection()
        if not selection:
            return

        # –ü–æ–ª—É—á–∞–µ–º filename –∏–∑ tags
        tags = self.tree.item(selection[0])['tags']
        if not tags:
            return

        filename = tags[0]

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc = next((d for d in self.documents if d.filename == filename), None)
        if doc:
            os.startfile(doc.full_path)

    def open_publish_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        selection = self.tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return

        # –ü–æ–ª—É—á–∞–µ–º filename –∏–∑ tags
        tags = self.tree.item(selection[0])['tags']
        if not tags:
            return

        filename = tags[0]

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc = next((d for d in self.documents if d.filename == filename), None)
        if doc:
            dialog = PublishDialog(self.root, doc, self)
            self.root.wait_window(dialog.dialog)


class PublishDialog:
    """–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""

    def __init__(self, parent, document, main_window):
        self.document = document
        self.main_window = main_window

        # –°–æ–∑–¥–∞—ë–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        self.dialog.geometry("900x700")
        self.dialog.configure(bg="#2C3E50")
        self.dialog.transient(parent)
        self.dialog.grab_set()

        # –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
        self.similar_docs = []
        self.archive_vars = {}  # {doc: BooleanVar}

        self.create_widgets()
        self.find_similar()

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–∞"""

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(
            self.dialog, text="–ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞",
            font=("Arial", 16, "bold"), bg="#37474F", fg="white", pady=10
        ).pack(fill=tk.X)

        # –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        frame1 = tk.LabelFrame(self.dialog, text="–§–∞–π–ª –∏–∑ –ü–†–û–ï–ö–¢–û–í",
                               padx=10, pady=10, font=("Arial", 14, "bold"),
                               bg="#37474F", fg="white")
        frame1.pack(fill=tk.X, padx=10, pady=5)

        tk.Label(frame1, text=self.document.filename,
                 font=("Arial", 14), bg="#37474F", fg="white").pack(anchor="w")

        # –ü–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        frame2 = tk.LabelFrame(self.dialog, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                               padx=10, pady=10, font=("Arial", 14, "bold"),
                               bg="#37474F", fg="white")
        frame2.pack(fill=tk.X, padx=10, pady=5)

        # –¢–∏–ø
        row1 = tk.Frame(frame2, bg="#37474F")
        row1.pack(fill=tk.X, pady=2)
        tk.Label(row1, text="–¢–∏–ø:", width=10, anchor="w",
                 font=("Arial", 14), bg="#37474F", fg="white").pack(side=tk.LEFT)
        self.typ_var = tk.StringVar(value=self.document.typ)
        tk.Entry(row1, textvariable=self.typ_var, width=20,
                 font=("Arial", 14), bg="#4A5568", fg="white",
                 insertbackground="white").pack(side=tk.LEFT)

        # –ö–æ–¥
        row2 = tk.Frame(frame2, bg="#37474F")
        row2.pack(fill=tk.X, pady=2)
        tk.Label(row2, text="–ö–æ–¥:", width=10, anchor="w",
                 font=("Arial", 14), bg="#37474F", fg="white").pack(side=tk.LEFT)
        self.kod_var = tk.StringVar(value=self.document.kod)
        tk.Entry(row2, textvariable=self.kod_var, width=20,
                 font=("Arial", 14), bg="#4A5568", fg="white",
                 insertbackground="white").pack(side=tk.LEFT)

        # –í–µ—Ä—Å–∏—è
        row3 = tk.Frame(frame2, bg="#37474F")
        row3.pack(fill=tk.X, pady=2)
        tk.Label(row3, text="–í–µ—Ä—Å–∏—è:", width=10, anchor="w",
                 font=("Arial", 14), bg="#37474F", fg="white").pack(side=tk.LEFT)
        self.version_var = tk.StringVar(value=self.document.version)
        tk.Entry(row3, textvariable=self.version_var, width=20,
                 font=("Arial", 14), bg="#4A5568", fg="white",
                 insertbackground="white").pack(side=tk.LEFT)

        # –ì–æ–¥
        row4 = tk.Frame(frame2, bg="#37474F")
        row4.pack(fill=tk.X, pady=2)
        tk.Label(row4, text="–ì–æ–¥:", width=10, anchor="w",
                 font=("Arial", 14), bg="#37474F", fg="white").pack(side=tk.LEFT)
        self.year_var = tk.StringVar(value=self.document.year)
        tk.Entry(row4, textvariable=self.year_var, width=20,
                 font=("Arial", 14), bg="#4A5568", fg="white",
                 insertbackground="white").pack(side=tk.LEFT)

        # –ù–∞–∑–≤–∞–Ω–∏–µ
        row5 = tk.Frame(frame2, bg="#37474F")
        row5.pack(fill=tk.X, pady=2)
        tk.Label(row5, text="–ù–∞–∑–≤–∞–Ω–∏–µ:", width=10, anchor="w",
                 font=("Arial", 14), bg="#37474F", fg="white").pack(side=tk.LEFT)
        self.title_var = tk.StringVar(value=self.document.title)
        tk.Entry(row5, textvariable=self.title_var, width=50,
                 font=("Arial", 14), bg="#4A5568", fg="white",
                 insertbackground="white").pack(side=tk.LEFT, fill=tk.X, expand=True)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
        for var in [self.typ_var, self.kod_var, self.version_var, self.year_var, self.title_var]:
            var.trace('w', lambda *args: self.update_preview())

        # –ü–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        self.similar_frame = tk.LabelFrame(
            self.dialog, text="–ü–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –î–ï–ô–°–¢–í–£–Æ–©–ò–•",
            padx=10, pady=10, font=("Arial", 14, "bold"),
            bg="#37474F", fg="white"
        )
        self.similar_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # Scrollable frame –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        canvas = tk.Canvas(self.similar_frame, bg="#37474F", highlightthickness=0)
        scrollbar = tk.Scrollbar(self.similar_frame, orient="vertical", command=canvas.yview, bg="#4A5568")
        self.scrollable_frame = tk.Frame(canvas, bg="#37474F")

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
        frame4 = tk.LabelFrame(self.dialog, text="–ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä)",
                               padx=10, pady=10, font=("Arial", 14, "bold"),
                               bg="#37474F", fg="white")
        frame4.pack(fill=tk.X, padx=10, pady=5)

        self.preview_label = tk.Label(
            frame4, text="", font=("Arial", 14, "bold"),
            fg="#90CAF9", bg="#37474F", anchor="w"
        )
        self.preview_label.pack(fill=tk.X)

        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(self.dialog, bg="#2C3E50")
        button_frame.pack(pady=10)

        tk.Button(
            button_frame, text="–û—Ç–º–µ–Ω–∞", width=15,
            command=self.dialog.destroy,
            font=("Arial", 14), bg="#546E7A", fg="white",
            activebackground="#607D8B", activeforeground="white"
        ).pack(side=tk.LEFT, padx=5)

        tk.Button(
            button_frame, text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", width=15,
            command=self.publish, bg="#5A6C7A", fg="white",
            font=("Arial", 14, "bold"),
            activebackground="#6A7C8A", activeforeground="white"
        ).pack(side=tk.LEFT, padx=5)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        self.update_preview()

    def find_similar(self):
        """–ü–æ–∏—Å–∫ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        active_docs = scan_folder(ACTIVE_DIR)

        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ
        self.similar_docs = find_similar_documents(self.document, active_docs)

        # –û—á–∏—â–∞–µ–º —Ñ—Ä–µ–π–º
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()

        if not self.similar_docs:
            tk.Label(
                self.scrollable_frame, text="–ü–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                fg="#B0BEC5", font=("Arial", 14, "italic"), bg="#37474F"
            ).pack(pady=20)
            return

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        for doc in self.similar_docs:
            frame = tk.Frame(self.scrollable_frame, relief=tk.RIDGE,
                             borderwidth=2, padx=10, pady=10, bg="#4A5568")
            frame.pack(fill=tk.X, pady=5)

            # –ì–∞–ª–æ—á–∫–∞
            var = tk.BooleanVar(value=True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–∞
            self.archive_vars[doc] = var

            chk = tk.Checkbutton(
                frame, variable=var, text="",
                font=("Arial", 14), bg="#4A5568", fg="white",
                selectcolor="#37474F", activebackground="#4A5568"
            )
            chk.pack(side=tk.LEFT)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            info_frame = tk.Frame(frame, bg="#4A5568")
            info_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)

            # –°–æ–±—Ä–∞–Ω–Ω–æ–µ –∏–º—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if doc.is_valid:
                doc_display = build_filename(doc.typ, doc.kod, doc.version, doc.year, doc.title)
            else:
                doc_display = doc.filename

            tk.Label(
                info_frame, text=doc_display,
                font=("Arial", 14, "bold"), bg="#4A5568", fg="white"
            ).pack(anchor="w")

            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
            comparison = compare_documents(self.document, doc)

            if comparison['matches']:
                matches_text = "–°–æ–≤–ø–∞–¥–µ–Ω–∏—è: " + " ".join(comparison['matches'])
                tk.Label(
                    info_frame, text=matches_text,
                    fg="#81C784", font=("Arial", 12), bg="#4A5568"
                ).pack(anchor="w")

            if comparison['differences']:
                diff_text = "–†–∞–∑–ª–∏—á–∏—è: " + " ".join(comparison['differences'])
                tk.Label(
                    info_frame, text=diff_text,
                    fg="#FFB74D", font=("Arial", 12), bg="#4A5568"
                ).pack(anchor="w")

    def update_preview(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏"""
        typ = self.typ_var.get()
        kod = self.kod_var.get()
        version = self.version_var.get()
        year = self.year_var.get()
        title = self.title_var.get()

        if all([typ, kod, version, year, title]):
            ext = os.path.splitext(self.document.filename)[1]
            new_name = build_filename(typ, kod, version, year, title) + ext
            self.preview_label.config(text=new_name)
        else:
            self.preview_label.config(text="(–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è)")

    def publish(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        typ = self.typ_var.get().strip()
        kod = self.kod_var.get().strip()
        version = self.version_var.get().strip()
        year = self.year_var.get().strip()
        title = self.title_var.get().strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
        if not all([typ, kod, version, year, title]):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return

        # –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
        archive_list = [doc for doc, var in self.archive_vars.items() if var.get()]

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        msg = f"–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç?\n\n"
        msg += f"–ù–æ–≤–æ–µ –∏–º—è: {build_filename(typ, kod, version, year, title)}\n\n"
        if archive_list:
            msg += f"–í –∞—Ä—Ö–∏–≤ –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(archive_list)}"

        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", msg):
            return

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
        success = publish_document(
            self.document, typ, kod, version, year, title, archive_list
        )

        if success:
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
            self.main_window.load_documents()  # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            self.dialog.destroy()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")