"""
GUI –¥–ª—è ISO2
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–µ—Å—Ç—Ä–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–∏–∞–ª–æ–≥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import os
import sys
import subprocess
import platform
from datetime import datetime
from config import PROJECTS_DIR, ACTIVE_DIR, ARCHIVE_DIR, CATEGORIES, ACTIVE_CATEGORIES, ARCHIVE_CATEGORIES
from logic import (
    scan_folder, scan_folder_with_categories, find_similar_documents, compare_documents,
    publish_document, parse_filename, build_filename
)
from registry import (
    read_registry_content, export_registry_to_csv, export_registry_to_excel,
    export_all_registries_to_excel, manual_update_registry
)
from employees import (
    load_employees, add_employee, update_employee, delete_employee,
    export_employees_to_excel, create_familiarization_sheet
)


class MainWindow:
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self, root):
        self.root = root
        self.root.title("ISO2 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –°–ú–ö")
        self.root.geometry("1200x700")
        self.root.configure(bg="#2C3E50")

        # –¢–µ–∫—É—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        self.current_folder = PROJECTS_DIR
        self.documents = []
        self.current_category = None  # –¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.setup_styles()

        self.create_widgets()
        self.load_documents()

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π ttk"""
        style = ttk.Style()
        style.theme_use('default')

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        style.configure("TButton",
                        font=("Arial", 14, "bold"),
                        foreground="white",
                        background="#4A5568",
                        borderwidth=2,
                        relief=tk.RAISED,
                        padding=5)
        style.map("TButton",
                  background=[('active', '#5A6678'), ('pressed', '#3A4558')],
                  foreground=[('active', 'white')])

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—á—É—Ç—å —Å–≤–µ—Ç–ª–µ–µ)
        style.configure("Publish.TButton",
                        font=("Arial", 14, "bold"),
                        foreground="white",
                        background="#546E7A",
                        borderwidth=2,
                        relief=tk.RAISED,
                        padding=5)
        style.map("Publish.TButton",
                  background=[('active', '#607D8B'), ('pressed', '#446E7A')],
                  foreground=[('active', 'white')])

        # –°—Ç–∏–ª—å –¥–ª—è Treeview
        style.configure("Treeview",
                        background="#37474F",
                        foreground="white",
                        fieldbackground="#37474F",
                        font=("Arial", 14),
                        rowheight=35)
        style.configure("Treeview.Heading",
                        background="#2C3E50",
                        foreground="white",
                        font=("Arial", 14, "bold"),
                        relief=tk.FLAT)
        style.map("Treeview",
                  background=[('selected', '#546E7A')],
                  foreground=[('selected', 'white')])

        # –°—Ç–∏–ª—å –¥–ª—è Combobox
        style.configure("TCombobox",
                        font=("Arial", 14),
                        foreground="black",
                        background="white",
                        fieldbackground="white",
                        selectbackground="#546E7A",
                        selectforeground="white")

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        top_frame = tk.Frame(self.root, bg="#37474F")
        top_frame.pack(side=tk.TOP, fill=tk.X, padx=10, pady=10)

        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
        ttk.Button(
            top_frame, text="–ü–†–û–ï–ö–¢–´", width=15,
            command=lambda: self.switch_folder(PROJECTS_DIR),
            style="TButton"
        ).pack(side=tk.LEFT, padx=5)

        ttk.Button(
            top_frame, text="–î–ï–ô–°–¢–í–£–Æ–©–ò–ï", width=15,
            command=lambda: self.switch_folder(ACTIVE_DIR),
            style="TButton"
        ).pack(side=tk.LEFT, padx=5)

        ttk.Button(
            top_frame, text="–ê–†–•–ò–í", width=15,
            command=lambda: self.switch_folder(ARCHIVE_DIR),
            style="TButton"
        ).pack(side=tk.LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–µ—Å—Ç—Ä–æ–≤
        ttk.Button(
            top_frame, text="–†–ï–ï–°–¢–†–´", width=15,
            command=self.open_registry_window,
            style="TButton"
        ).pack(side=tk.LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        ttk.Button(
            top_frame, text="–°–û–¢–†–£–î–ù–ò–ö–ò", width=15,
            command=self.open_employees_window,
            style="TButton"
        ).pack(side=tk.LEFT, padx=5)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        tk.Frame(top_frame, width=30, bg="#37474F").pack(side=tk.LEFT)

        # –ö–Ω–æ–ø–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        self.publish_btn = ttk.Button(
            top_frame, text="üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", width=20,
            command=self.open_publish_dialog,
            style="Publish.TButton"
        )
        self.publish_btn.pack(side=tk.LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∞ –ª–∏—Å—Ç–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è
        self.familiarization_btn = ttk.Button(
            top_frame, text="üìÑ –õ–∏—Å—Ç –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è", width=22,
            command=self.open_familiarization_dialog,
            style="Publish.TButton"
        )
        self.familiarization_btn.pack(side=tk.LEFT, padx=5)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        tk.Frame(top_frame, width=30, bg="#37474F").pack(side=tk.LEFT)

        # –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ä–∞–±–æ—á–µ–π –ø–∞–ø–∫–∏
        ttk.Button(
            top_frame, text="‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å –ø–∞–ø–∫—É", width=18,
            command=self.change_work_folder,
            style="TButton"
        ).pack(side=tk.LEFT, padx=5)

        # –ú–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        folder_filter_frame = tk.Frame(self.root, bg="#455A64", height=60)
        folder_filter_frame.pack(fill=tk.X, padx=10)
        folder_filter_frame.pack_propagate(False)

        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        self.folder_label = tk.Label(
            folder_filter_frame, text="", font=("Arial", 16, "bold"),
            bg="#455A64", fg="white", anchor="w", padx=10
        )
        self.folder_label.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        filter_frame = tk.Frame(folder_filter_frame, bg="#455A64")
        filter_frame.pack(side=tk.RIGHT, padx=10)

        self.category_label = tk.Label(
            filter_frame, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", font=("Arial", 14, "bold"),
            bg="#455A64", fg="white"
        )

        self.category_combo = ttk.Combobox(
            filter_frame,
            values=["–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"] + CATEGORIES,
            state="readonly",
            font=("Arial", 14),
            width=20
        )
        self.category_combo.current(0)
        self.category_combo.bind("<<ComboboxSelected>>", self.on_category_change)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        table_frame = tk.Frame(self.root, bg="#2C3E50")
        table_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # Scrollbar
        scrollbar = tk.Scrollbar(table_frame, bg="#37474F")
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # Treeview - –û–î–ù–ê –∫–æ–ª–æ–Ω–∫–∞ "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
        columns = ("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞",)
        self.tree = ttk.Treeview(
            table_frame, columns=columns, show="headings",
            yscrollcommand=scrollbar.set
        )
        scrollbar.config(command=self.tree.yview)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–∫–∏
        self.tree.heading("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞", text="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        self.tree.column("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞", width=1100)

        self.tree.pack(fill=tk.BOTH, expand=True)

        # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ - –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
        self.tree.bind('<Double-1>', self.open_document)

        # –ö–ª–∏–∫ - –≤—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫)
        self.tree.bind('<<TreeviewSelect>>', self.on_document_select)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_label = tk.Label(
            self.root, text="–ì–æ—Ç–æ–≤", anchor="w",
            bg="#37474F", fg="white", relief=tk.SUNKEN,
            font=("Arial", 14), height=2
        )
        self.status_label.pack(side=tk.BOTTOM, fill=tk.X)

    def switch_folder(self, folder_path):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–∞–ø–∫–∞–º–∏"""
        self.current_folder = folder_path
        self.current_category = None
        self.category_combo.current(0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –Ω–∞ "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if folder_path in [ACTIVE_DIR, ARCHIVE_DIR]:
            self.category_label.pack(side=tk.LEFT, padx=5)
            self.category_combo.pack(side=tk.LEFT, padx=5)
        else:
            self.category_label.pack_forget()
            self.category_combo.pack_forget()

        self.load_documents()

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ü–†–û–ï–ö–¢–û–í
        if folder_path == PROJECTS_DIR:
            self.publish_btn.config(state=tk.NORMAL)
        else:
            self.publish_btn.config(state=tk.DISABLED)

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ª–∏—Å—Ç–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –î–ï–ô–°–¢–í–£–Æ–©–ò–•
        if folder_path == ACTIVE_DIR:
            self.familiarization_btn.config(state=tk.DISABLED)  # –ë—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        else:
            self.familiarization_btn.config(state=tk.DISABLED)

    def on_category_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        selected = self.category_combo.get()

        if selected == "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
            self.current_category = None
        else:
            self.current_category = selected

        self.filter_documents()

    def load_documents(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏"""
        if self.current_folder == PROJECTS_DIR:
            # –í –ü–†–û–ï–ö–¢–ê–• - –æ–±—ã—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            self.documents = scan_folder(self.current_folder)
        elif self.current_folder == ACTIVE_DIR:
            # –í –î–ï–ô–°–¢–í–£–Æ–©–ò–• - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            self.documents = scan_folder_with_categories(ACTIVE_DIR, ACTIVE_CATEGORIES)
        elif self.current_folder == ARCHIVE_DIR:
            # –í –ê–†–•–ò–í–ï - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            self.documents = scan_folder_with_categories(ARCHIVE_DIR, ARCHIVE_CATEGORIES)
        else:
            self.documents = []

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –ø–∞–ø–∫–∏
        folder_name = os.path.basename(self.current_folder)
        self.folder_label.config(text=f"üìÅ {folder_name} ({len(self.documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.filter_documents()

    def filter_documents(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.tree.get_children():
            self.tree.delete(item)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if self.current_category:
            filtered_docs = [doc for doc in self.documents if doc.category == self.current_category]
        else:
            filtered_docs = self.documents

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É
        for doc in filtered_docs:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
            if self.current_folder == PROJECTS_DIR:
                # –í –ü–†–û–ï–ö–¢–ê–• - –∏–º—è —Ñ–∞–π–ª–∞ –ö–ê–ö –ï–°–¢–¨
                display_name = doc.filename
            else:
                # –í –î–ï–ô–°–¢–í–£–Æ–©–ò–•/–ê–†–•–ò–í - —Å–æ–±—Ä–∞–Ω–Ω–æ–µ –∏–º—è (–ø–∞—Ä—Å–∏–Ω–≥ + —Å–ª–∏—è–Ω–∏–µ) + –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                if doc.is_valid:
                    display_name = build_filename(doc.typ, doc.kod, doc.version, doc.year, doc.title)
                    if doc.category:
                        display_name = f"[{doc.category}] {display_name}"
                else:
                    display_name = doc.filename
                    if doc.category:
                        display_name = f"[{doc.category}] {display_name}"

            self.tree.insert("", tk.END, values=(display_name,), tags=(doc.filename, doc.category if doc.category else ""))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_label.config(text=f"–ü–æ–∫–∞–∑–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(filtered_docs)}")

    def open_document(self, event):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (–¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫)"""
        selection = self.tree.selection()
        if not selection:
            return

        # –ü–æ–ª—É—á–∞–µ–º filename –∏ category –∏–∑ tags
        tags = self.tree.item(selection[0])['tags']
        if not tags:
            return

        filename = tags[0]
        category = tags[1] if len(tags) > 1 and tags[1] else None

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc = next((d for d in self.documents if d.filename == filename and d.category == category), None)
        if doc:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ
            try:
                if platform.system() == 'Darwin':  # macOS
                    subprocess.call(['open', doc.full_path])
                elif platform.system() == 'Windows':
                    os.startfile(doc.full_path)
                else:  # Linux
                    subprocess.call(['xdg-open', doc.full_path])
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª:\n{e}")

    def on_document_select(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        selection = self.tree.selection()

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ª–∏—Å—Ç–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç –∏ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞ –î–ï–ô–°–¢–í–£–Æ–©–ò–ï
        if selection and self.current_folder == ACTIVE_DIR:
            self.familiarization_btn.config(state=tk.NORMAL)
        else:
            if self.current_folder == ACTIVE_DIR:
                self.familiarization_btn.config(state=tk.DISABLED)

    def open_publish_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        selection = self.tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return

        # –ü–æ–ª—É—á–∞–µ–º filename –∏–∑ tags
        tags = self.tree.item(selection[0])['tags']
        if not tags:
            return

        filename = tags[0]

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc = next((d for d in self.documents if d.filename == filename), None)
        if doc:
            dialog = PublishDialog(self.root, doc, self)
            self.root.wait_window(dialog.dialog)

    def open_familiarization_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è"""
        selection = self.tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –î–ï–ô–°–¢–í–£–Æ–©–ò–•")
            return

        # –ü–æ–ª—É—á–∞–µ–º filename –∏ category –∏–∑ tags
        tags = self.tree.item(selection[0])['tags']
        if not tags:
            return

        filename = tags[0]
        category = tags[1] if len(tags) > 1 and tags[1] else None

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc = next((d for d in self.documents if d.filename == filename and d.category == category), None)
        if doc:
            dialog = FamiliarizationDialog(self.root, doc)
            self.root.wait_window(dialog.dialog)

    def open_registry_window(self):
        """–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–µ—Å—Ç—Ä–æ–≤"""
        registry_window = RegistryWindow(self.root)
        self.root.wait_window(registry_window.window)

    def open_employees_window(self):
        """–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"""
        employees_window = EmployeesWindow(self.root)
        self.root.wait_window(employees_window.window)

    def change_work_folder(self):
        """–°–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—á—É—é –ø–∞–ø–∫—É"""
        import config

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
        current = config.DOCS_DIR if config.DOCS_DIR else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

        result = messagebox.askyesno(
            "–°–º–µ–Ω–∞ —Ä–∞–±–æ—á–µ–π –ø–∞–ø–∫–∏",
            f"–¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞:\n{current}\n\n"
            f"–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤?"
        )

        if not result:
            return

        # –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏
        new_dir = filedialog.askdirectory(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            mustexist=True
        )

        if not new_dir:
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É
        if config.set_work_dir(new_dir):
            messagebox.showinfo(
                "–£—Å–ø–µ—Ö",
                f"–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:\n{new_dir}\n\n"
                f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ."
            )

            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–∫–Ω–æ
            self.root.destroy()

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
            import tkinter as tk
            new_root = tk.Tk()
            from gui_main import MainWindow
            MainWindow(new_root)
            new_root.mainloop()
        else:
            messagebox.showerror(
                "–û—à–∏–±–∫–∞",
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—á—É—é –ø–∞–ø–∫—É"
            )


class PublishDialog:
    """–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""

    def __init__(self, parent, document, main_window):
        self.document = document
        self.main_window = main_window

        # –°–æ–∑–¥–∞—ë–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        self.dialog.geometry("900x650")
        self.dialog.configure(bg="#2C3E50")
        self.dialog.transient(parent)
        self.dialog.grab_set()

        # –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
        self.similar_docs = []
        self.archive_vars = {}  # {doc: BooleanVar}

        self.create_widgets()
        self.find_similar()

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–∞"""

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(
            self.dialog, text="–ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞",
            font=("Arial", 16, "bold"), bg="#37474F", fg="white", pady=10
        ).pack(fill=tk.X)

        # –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        frame1 = tk.LabelFrame(self.dialog, text="–§–∞–π–ª –∏–∑ –ü–†–û–ï–ö–¢–û–í",
                               padx=10, pady=10, font=("Arial", 14, "bold"),
                               bg="#37474F", fg="white")
        frame1.pack(fill=tk.X, padx=10, pady=5)

        tk.Label(frame1, text=self.document.filename,
                 font=("Arial", 14), bg="#37474F", fg="white").pack(anchor="w")

        # –ü–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        frame2 = tk.LabelFrame(self.dialog, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                               padx=10, pady=10, font=("Arial", 14, "bold"),
                               bg="#37474F", fg="white")
        frame2.pack(fill=tk.X, padx=10, pady=5)

        # –¢–∏–ø
        row1 = tk.Frame(frame2, bg="#37474F")
        row1.pack(fill=tk.X, pady=2)
        tk.Label(row1, text="–¢–∏–ø:", width=10, anchor="w",
                 font=("Arial", 14), bg="#37474F", fg="white").pack(side=tk.LEFT)
        self.typ_var = tk.StringVar(value=self.document.typ)
        tk.Entry(row1, textvariable=self.typ_var, width=20,
                 font=("Arial", 14), bg="#4A5568", fg="white",
                 insertbackground="white").pack(side=tk.LEFT)

        # –ö–æ–¥
        row2 = tk.Frame(frame2, bg="#37474F")
        row2.pack(fill=tk.X, pady=2)
        tk.Label(row2, text="–ö–æ–¥:", width=10, anchor="w",
                 font=("Arial", 14), bg="#37474F", fg="white").pack(side=tk.LEFT)
        self.kod_var = tk.StringVar(value=self.document.kod)
        tk.Entry(row2, textvariable=self.kod_var, width=20,
                 font=("Arial", 14), bg="#4A5568", fg="white",
                 insertbackground="white").pack(side=tk.LEFT)

        # –í–µ—Ä—Å–∏—è
        row3 = tk.Frame(frame2, bg="#37474F")
        row3.pack(fill=tk.X, pady=2)
        tk.Label(row3, text="–í–µ—Ä—Å–∏—è:", width=10, anchor="w",
                 font=("Arial", 14), bg="#37474F", fg="white").pack(side=tk.LEFT)
        self.version_var = tk.StringVar(value=self.document.version)
        tk.Entry(row3, textvariable=self.version_var, width=20,
                 font=("Arial", 14), bg="#4A5568", fg="white",
                 insertbackground="white").pack(side=tk.LEFT)

        # –ì–æ–¥
        row4 = tk.Frame(frame2, bg="#37474F")
        row4.pack(fill=tk.X, pady=2)
        tk.Label(row4, text="–ì–æ–¥:", width=10, anchor="w",
                 font=("Arial", 14), bg="#37474F", fg="white").pack(side=tk.LEFT)
        self.year_var = tk.StringVar(value=self.document.year)
        tk.Entry(row4, textvariable=self.year_var, width=20,
                 font=("Arial", 14), bg="#4A5568", fg="white",
                 insertbackground="white").pack(side=tk.LEFT)

        # –ù–∞–∑–≤–∞–Ω–∏–µ
        row5 = tk.Frame(frame2, bg="#37474F")
        row5.pack(fill=tk.X, pady=2)
        tk.Label(row5, text="–ù–∞–∑–≤–∞–Ω–∏–µ:", width=10, anchor="w",
                 font=("Arial", 14), bg="#37474F", fg="white").pack(side=tk.LEFT)
        self.title_var = tk.StringVar(value=self.document.title)
        tk.Entry(row5, textvariable=self.title_var, width=50,
                 font=("Arial", 14), bg="#4A5568", fg="white",
                 insertbackground="white").pack(side=tk.LEFT, fill=tk.X, expand=True)

        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        row6 = tk.Frame(frame2, bg="#37474F")
        row6.pack(fill=tk.X, pady=2)
        tk.Label(row6, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", width=10, anchor="w",
                 font=("Arial", 14), bg="#37474F", fg="white").pack(side=tk.LEFT)

        self.category_var = tk.StringVar(value=CATEGORIES[0])
        category_combo = ttk.Combobox(
            row6,
            textvariable=self.category_var,
            values=CATEGORIES,
            state="readonly",
            font=("Arial", 14),
            width=25
        )
        category_combo.pack(side=tk.LEFT)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
        for var in [self.typ_var, self.kod_var, self.version_var, self.year_var, self.title_var]:
            var.trace('w', lambda *args: self.update_preview())

        # –ü–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        self.similar_frame = tk.LabelFrame(
            self.dialog, text="–ü–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –î–ï–ô–°–¢–í–£–Æ–©–ò–•",
            padx=10, pady=10, font=("Arial", 14, "bold"),
            bg="#37474F", fg="white", height=200
        )
        self.similar_frame.pack(fill=tk.BOTH, padx=10, pady=5)
        self.similar_frame.pack_propagate(False)  # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—ã—Å–æ—Ç—É

        # Scrollable frame –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        canvas = tk.Canvas(self.similar_frame, bg="#37474F", highlightthickness=0)
        scrollbar = tk.Scrollbar(self.similar_frame, orient="vertical", command=canvas.yview, bg="#4A5568")
        self.scrollable_frame = tk.Frame(canvas, bg="#37474F")

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
        frame4 = tk.LabelFrame(self.dialog, text="–ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä)",
                               padx=10, pady=10, font=("Arial", 14, "bold"),
                               bg="#37474F", fg="white")
        frame4.pack(fill=tk.X, padx=10, pady=5)

        self.preview_label = tk.Label(
            frame4, text="", font=("Arial", 14, "bold"),
            fg="#90CAF9", bg="#37474F", anchor="w"
        )
        self.preview_label.pack(fill=tk.X)

        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(self.dialog, bg="#2C3E50")
        button_frame.pack(pady=10)

        ttk.Button(
            button_frame, text="–û—Ç–º–µ–Ω–∞", width=15,
            command=self.dialog.destroy,
            style="TButton"
        ).pack(side=tk.LEFT, padx=5)

        ttk.Button(
            button_frame, text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", width=15,
            command=self.publish,
            style="Publish.TButton"
        ).pack(side=tk.LEFT, padx=5)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        self.update_preview()

    def find_similar(self):
        """–ü–æ–∏—Å–∫ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        active_docs = scan_folder_with_categories(ACTIVE_DIR, ACTIVE_CATEGORIES)

        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ
        self.similar_docs = find_similar_documents(self.document, active_docs)

        # –û—á–∏—â–∞–µ–º —Ñ—Ä–µ–π–º
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()

        if not self.similar_docs:
            tk.Label(
                self.scrollable_frame, text="–ü–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                fg="#B0BEC5", font=("Arial", 14, "italic"), bg="#37474F"
            ).pack(pady=20)
            return

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        for doc in self.similar_docs:
            frame = tk.Frame(self.scrollable_frame, relief=tk.RIDGE,
                             borderwidth=2, padx=10, pady=10, bg="#4A5568")
            frame.pack(fill=tk.X, pady=5)

            # –ì–∞–ª–æ—á–∫–∞
            var = tk.BooleanVar(value=True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–∞
            self.archive_vars[doc] = var

            chk = tk.Checkbutton(
                frame, variable=var, text="",
                font=("Arial", 14), bg="#4A5568", fg="white",
                selectcolor="#37474F", activebackground="#4A5568"
            )
            chk.pack(side=tk.LEFT)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            info_frame = tk.Frame(frame, bg="#4A5568")
            info_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)

            # –°–æ–±—Ä–∞–Ω–Ω–æ–µ –∏–º—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
            if doc.is_valid:
                doc_display = build_filename(doc.typ, doc.kod, doc.version, doc.year, doc.title)
            else:
                doc_display = doc.filename

            if doc.category:
                doc_display = f"[{doc.category}] {doc_display}"

            tk.Label(
                info_frame, text=doc_display,
                font=("Arial", 14, "bold"), bg="#4A5568", fg="white"
            ).pack(anchor="w")

            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
            comparison = compare_documents(self.document, doc)

            if comparison['matches']:
                matches_text = "–°–æ–≤–ø–∞–¥–µ–Ω–∏—è: " + " ".join(comparison['matches'])
                tk.Label(
                    info_frame, text=matches_text,
                    fg="#81C784", font=("Arial", 12), bg="#4A5568"
                ).pack(anchor="w")

            if comparison['differences']:
                diff_text = "–†–∞–∑–ª–∏—á–∏—è: " + " ".join(comparison['differences'])
                tk.Label(
                    info_frame, text=diff_text,
                    fg="#FFB74D", font=("Arial", 12), bg="#4A5568"
                ).pack(anchor="w")

    def update_preview(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏"""
        typ = self.typ_var.get()
        kod = self.kod_var.get()
        version = self.version_var.get()
        year = self.year_var.get()
        title = self.title_var.get()

        if all([typ, kod, version, year, title]):
            ext = os.path.splitext(self.document.filename)[1]
            new_name = build_filename(typ, kod, version, year, title) + ext
            self.preview_label.config(text=new_name)
        else:
            self.preview_label.config(text="(–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è)")

    def publish(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        typ = self.typ_var.get().strip()
        kod = self.kod_var.get().strip()
        version = self.version_var.get().strip()
        year = self.year_var.get().strip()
        title = self.title_var.get().strip()
        category = self.category_var.get()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
        if not all([typ, kod, version, year, title, category]):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è, –≤–∫–ª—é—á–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            return

        # –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
        archive_list = [doc for doc, var in self.archive_vars.items() if var.get()]

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        msg = f"–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç?\n\n"
        msg += f"–ù–æ–≤–æ–µ –∏–º—è: {build_filename(typ, kod, version, year, title)}\n"
        msg += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        if archive_list:
            msg += f"–í –∞—Ä—Ö–∏–≤ –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(archive_list)}"

        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", msg):
            return

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
        success = publish_document(
            self.document, typ, kod, version, year, title, category, archive_list
        )

        if success:
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
            self.main_window.load_documents()  # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            self.dialog.destroy()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")


class RegistryWindow:
    """–û–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–µ—Å—Ç—Ä–æ–≤"""

    def __init__(self, parent):
        # –°–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ
        self.window = tk.Toplevel(parent)
        self.window.title("–†–µ–µ—Å—Ç—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –°–ú–ö")
        self.window.geometry("1000x700")
        self.window.configure(bg="#2C3E50")
        self.window.transient(parent)
        self.window.grab_set()

        self.current_category = CATEGORIES[0]  # –¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è

        self.create_widgets()
        self.load_registry()

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(
            self.window, text="üìã –†–µ–µ—Å—Ç—Ä—ã –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            font=("Arial", 18, "bold"), bg="#37474F", fg="white", pady=15
        )
        header.pack(fill=tk.X)

        # –ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–Ω–æ–ø–æ–∫
        control_frame = tk.Frame(self.window, bg="#455A64", pady=10)
        control_frame.pack(fill=tk.X, padx=10)

        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        tk.Label(
            control_frame, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", font=("Arial", 14, "bold"),
            bg="#455A64", fg="white"
        ).pack(side=tk.LEFT, padx=10)

        self.category_var = tk.StringVar(value=self.current_category)
        self.category_combo = ttk.Combobox(
            control_frame,
            textvariable=self.category_var,
            values=CATEGORIES,
            state="readonly",
            font=("Arial", 14),
            width=25
        )
        self.category_combo.pack(side=tk.LEFT, padx=5)
        self.category_combo.bind("<<ComboboxSelected>>", self.on_category_change)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        tk.Frame(control_frame, width=30, bg="#455A64").pack(side=tk.LEFT)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞
        ttk.Button(
            control_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–µ—Å—Ç—Ä", width=20,
            command=self.update_registry,
            style="TButton"
        ).pack(side=tk.LEFT, padx=5)

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_frame = tk.Frame(self.window, bg="#455A64", pady=10)
        export_frame.pack(fill=tk.X, padx=10)

        tk.Label(
            export_frame, text="–≠–∫—Å–ø–æ—Ä—Ç:", font=("Arial", 14, "bold"),
            bg="#455A64", fg="white"
        ).pack(side=tk.LEFT, padx=10)

        ttk.Button(
            export_frame, text="üíæ CSV (—Ç–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è)", width=25,
            command=self.export_csv,
            style="Publish.TButton"
        ).pack(side=tk.LEFT, padx=5)

        ttk.Button(
            export_frame, text="üìä Excel (—Ç–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è)", width=28,
            command=self.export_excel_single,
            style="Publish.TButton"
        ).pack(side=tk.LEFT, padx=5)

        ttk.Button(
            export_frame, text="üìö Excel (–≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)", width=25,
            command=self.export_excel_all,
            style="Publish.TButton"
        ).pack(side=tk.LEFT, padx=5)

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞
        text_frame = tk.Frame(self.window, bg="#2C3E50")
        text_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # Scrollbar
        scrollbar = tk.Scrollbar(text_frame, bg="#37474F")
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # Text widget
        self.text_widget = tk.Text(
            text_frame,
            font=("Courier New", 12),
            bg="#37474F",
            fg="white",
            insertbackground="white",
            wrap=tk.WORD,
            yscrollcommand=scrollbar.set
        )
        self.text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=self.text_widget.yview)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_label = tk.Label(
            self.window, text="–ì–æ—Ç–æ–≤", anchor="w",
            bg="#37474F", fg="white", relief=tk.SUNKEN,
            font=("Arial", 12), height=2
        )
        self.status_label.pack(side=tk.BOTTOM, fill=tk.X)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_frame = tk.Frame(self.window, bg="#2C3E50")
        close_frame.pack(pady=10)

        ttk.Button(
            close_frame, text="–ó–∞–∫—Ä—ã—Ç—å", width=15,
            command=self.window.destroy,
            style="TButton"
        ).pack()

    def on_category_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        self.current_category = self.category_var.get()
        self.load_registry()

    def load_registry(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–µ—Å—Ç—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        self.text_widget.delete(1.0, tk.END)

        content = read_registry_content(self.current_category)
        self.text_widget.insert(1.0, content)

        self.status_label.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ä–µ–µ—Å—Ç—Ä: {self.current_category}")

    def update_registry(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞"""
        success = manual_update_registry(self.current_category)

        if success:
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–µ–µ—Å—Ç—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{self.current_category}' –æ–±–Ω–æ–≤–ª—ë–Ω!")
            self.load_registry()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–µ—Å—Ç—Ä")

    def export_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ –≤ CSV"""
        # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        default_name = f"–†–µ–µ—Å—Ç—Ä_{self.current_category.replace(' ', '_')}_{datetime.now().strftime('%Y-%m-%d')}.csv"
        filepath = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–µ—Å—Ç—Ä –∫–∞–∫ CSV",
            defaultextension=".csv",
            filetypes=[("CSV —Ñ–∞–π–ª—ã", "*.csv"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
            initialfile=default_name
        )

        if not filepath:
            return

        success = export_registry_to_csv(self.current_category, filepath)

        if success:
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–µ–µ—Å—Ç—Ä —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤:\n{filepath}")
            self.status_label.config(text=f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ CSV: {os.path.basename(filepath)}")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–µ—Å—Ç—Ä")

    def export_excel_single(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ –≤ Excel"""
        # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        default_name = f"–†–µ–µ—Å—Ç—Ä_{self.current_category.replace(' ', '_')}_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
        filepath = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–µ—Å—Ç—Ä –∫–∞–∫ Excel",
            defaultextension=".xlsx",
            filetypes=[("Excel —Ñ–∞–π–ª—ã", "*.xlsx"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
            initialfile=default_name
        )

        if not filepath:
            return

        success = export_registry_to_excel(self.current_category, filepath)

        if success:
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–µ–µ—Å—Ç—Ä —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤:\n{filepath}")
            self.status_label.config(text=f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ Excel: {os.path.basename(filepath)}")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–µ—Å—Ç—Ä.\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl:\npip install openpyxl")

    def export_excel_all(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ä–µ–µ—Å—Ç—Ä–æ–≤ –≤ –æ–¥–∏–Ω Excel —Ñ–∞–π–ª"""
        # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        default_name = f"–†–µ–µ—Å—Ç—Ä—ã_–°–ú–ö_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
        filepath = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Ä–µ–µ—Å—Ç—Ä—ã –∫–∞–∫ Excel",
            defaultextension=".xlsx",
            filetypes=[("Excel —Ñ–∞–π–ª—ã", "*.xlsx"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
            initialfile=default_name
        )

        if not filepath:
            return

        success = export_all_registries_to_excel(filepath)

        if success:
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–í—Å–µ —Ä–µ–µ—Å—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{filepath}")
            self.status_label.config(text=f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ —Ä–µ–µ—Å—Ç—Ä—ã –≤ Excel: {os.path.basename(filepath)}")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–µ—Å—Ç—Ä—ã.\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl:\npip install openpyxl")


class EmployeesWindow:
    """–û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""

    def __init__(self, parent):
        # –°–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ
        self.window = tk.Toplevel(parent)
        self.window.title("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        self.window.geometry("1000x600")
        self.window.configure(bg="#2C3E50")
        self.window.transient(parent)
        self.window.grab_set()

        self.employees = []  # –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        self.selected_employee = None  # –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫

        self.create_widgets()
        self.load_employees_list()

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(
            self.window, text="üë• –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            font=("Arial", 18, "bold"), bg="#37474F", fg="white", pady=15
        )
        header.pack(fill=tk.X)

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = tk.Frame(self.window, bg="#455A64", pady=10)
        control_frame.pack(fill=tk.X, padx=10)

        ttk.Button(
            control_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", width=15,
            command=self.add_employee_dialog,
            style="Publish.TButton"
        ).pack(side=tk.LEFT, padx=5)

        ttk.Button(
            control_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", width=18,
            command=self.edit_employee_dialog,
            style="TButton"
        ).pack(side=tk.LEFT, padx=5)

        ttk.Button(
            control_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", width=15,
            command=self.delete_employee_action,
            style="TButton"
        ).pack(side=tk.LEFT, padx=5)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        tk.Frame(control_frame, width=30, bg="#455A64").pack(side=tk.LEFT)

        ttk.Button(
            control_frame, text="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", width=18,
            command=self.export_to_excel,
            style="Publish.TButton"
        ).pack(side=tk.LEFT, padx=5)

        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        table_frame = tk.Frame(self.window, bg="#2C3E50")
        table_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # Scrollbar
        scrollbar = tk.Scrollbar(table_frame, bg="#37474F")
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # Treeview
        columns = ("–§–ò–û", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", "Email")
        self.tree = ttk.Treeview(
            table_frame, columns=columns, show="headings",
            yscrollcommand=scrollbar.set
        )
        scrollbar.config(command=self.tree.yview)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.tree.heading("–§–ò–û", text="–§–ò–û")
        self.tree.heading("–î–æ–ª–∂–Ω–æ—Å—Ç—å", text="–î–æ–ª–∂–Ω–æ—Å—Ç—å")
        self.tree.heading("–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", text="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ")
        self.tree.heading("Email", text="Email")

        self.tree.column("–§–ò–û", width=300)
        self.tree.column("–î–æ–ª–∂–Ω–æ—Å—Ç—å", width=250)
        self.tree.column("–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", width=120)
        self.tree.column("Email", width=250)

        self.tree.pack(fill=tk.BOTH, expand=True)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏
        self.tree.bind('<<TreeviewSelect>>', self.on_select)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_label = tk.Label(
            self.window, text="–ì–æ—Ç–æ–≤", anchor="w",
            bg="#37474F", fg="white", relief=tk.SUNKEN,
            font=("Arial", 12), height=2
        )
        self.status_label.pack(side=tk.BOTTOM, fill=tk.X)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_frame = tk.Frame(self.window, bg="#2C3E50")
        close_frame.pack(pady=10)

        ttk.Button(
            close_frame, text="–ó–∞–∫—Ä—ã—Ç—å", width=15,
            command=self.window.destroy,
            style="TButton"
        ).pack()

    def load_employees_list(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.tree.get_children():
            self.tree.delete(item)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        self.employees = load_employees()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        for emp in self.employees:
            self.tree.insert("", tk.END, values=(
                emp['fio'],
                emp['position'],
                emp['department'],
                emp['email']
            ), tags=(emp['id'],))

        self.status_label.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(self.employees)}")

    def on_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏"""
        selection = self.tree.selection()
        if selection:
            tags = self.tree.item(selection[0])['tags']
            if tags:
                emp_id = tags[0]
                self.selected_employee = next((emp for emp in self.employees if emp['id'] == emp_id), None)

    def add_employee_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        dialog = EmployeeEditDialog(self.window, None, self)
        self.window.wait_window(dialog.dialog)

    def edit_employee_dialog(self):
        """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        if not self.selected_employee:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        dialog = EmployeeEditDialog(self.window, self.selected_employee, self)
        self.window.wait_window(dialog.dialog)

    def delete_employee_action(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        if not self.selected_employee:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                    f"–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n{self.selected_employee['fio']}?"):
            return

        success = delete_employee(self.selected_employee['id'])

        if success:
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª—ë–Ω")
            self.load_employees_list()
            self.selected_employee = None
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")

    def export_to_excel(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ Excel"""
        if not self.employees:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç")
            return

        # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        default_name = f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
        filepath = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            defaultextension=".xlsx",
            filetypes=[("Excel —Ñ–∞–π–ª—ã", "*.xlsx"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
            initialfile=default_name
        )

        if not filepath:
            return

        success = export_employees_to_excel(filepath)

        if success:
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤:\n{filepath}")
            self.status_label.config(text=f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ Excel: {os.path.basename(filepath)}")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞",
                                 "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫.\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl:\npip install openpyxl")


class EmployeeEditDialog:
    """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""

    def __init__(self, parent, employee, employees_window):
        self.employee = employee  # None –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.employees_window = employees_window

        # –°–æ–∑–¥–∞—ë–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
        self.dialog = tk.Toplevel(parent)
        title = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" if employee else "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
        self.dialog.title(title)
        self.dialog.geometry("600x400")
        self.dialog.configure(bg="#2C3E50")
        self.dialog.transient(parent)
        self.dialog.grab_set()

        self.create_widgets()

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–∞"""

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_text = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" if self.employee else "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ"
        tk.Label(
            self.dialog, text=header_text,
            font=("Arial", 16, "bold"), bg="#37474F", fg="white", pady=10
        ).pack(fill=tk.X)

        # –§–æ—Ä–º–∞
        form_frame = tk.LabelFrame(
            self.dialog, text="–î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
            padx=20, pady=20, font=("Arial", 14, "bold"),
            bg="#37474F", fg="white"
        )
        form_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # –§–ò–û
        row1 = tk.Frame(form_frame, bg="#37474F")
        row1.pack(fill=tk.X, pady=5)
        tk.Label(row1, text="–§–ò–û:", width=15, anchor="w",
                 font=("Arial", 12), bg="#37474F", fg="white").pack(side=tk.LEFT)
        self.fio_var = tk.StringVar(value=self.employee['fio'] if self.employee else "")
        tk.Entry(row1, textvariable=self.fio_var, width=40,
                 font=("Arial", 12), bg="#4A5568", fg="white",
                 insertbackground="white").pack(side=tk.LEFT, fill=tk.X, expand=True)

        # –î–æ–ª–∂–Ω–æ—Å—Ç—å
        row2 = tk.Frame(form_frame, bg="#37474F")
        row2.pack(fill=tk.X, pady=5)
        tk.Label(row2, text="–î–æ–ª–∂–Ω–æ—Å—Ç—å:", width=15, anchor="w",
                 font=("Arial", 12), bg="#37474F", fg="white").pack(side=tk.LEFT)
        self.position_var = tk.StringVar(value=self.employee['position'] if self.employee else "")
        tk.Entry(row2, textvariable=self.position_var, width=40,
                 font=("Arial", 12), bg="#4A5568", fg="white",
                 insertbackground="white").pack(side=tk.LEFT, fill=tk.X, expand=True)

        # –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        row3 = tk.Frame(form_frame, bg="#37474F")
        row3.pack(fill=tk.X, pady=5)
        tk.Label(row3, text="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:", width=15, anchor="w",
                 font=("Arial", 12), bg="#37474F", fg="white").pack(side=tk.LEFT)
        self.department_var = tk.StringVar(value=self.employee['department'] if self.employee else "–§–ë–ü")
        department_combo = ttk.Combobox(
            row3,
            textvariable=self.department_var,
            values=["–§–ë–ü", "–ù–ü–§"],
            state="readonly",
            font=("Arial", 12),
            width=20
        )
        department_combo.pack(side=tk.LEFT)

        # Email
        row4 = tk.Frame(form_frame, bg="#37474F")
        row4.pack(fill=tk.X, pady=5)
        tk.Label(row4, text="Email:", width=15, anchor="w",
                 font=("Arial", 12), bg="#37474F", fg="white").pack(side=tk.LEFT)
        self.email_var = tk.StringVar(value=self.employee['email'] if self.employee else "")
        tk.Entry(row4, textvariable=self.email_var, width=40,
                 font=("Arial", 12), bg="#4A5568", fg="white",
                 insertbackground="white").pack(side=tk.LEFT, fill=tk.X, expand=True)

        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(self.dialog, bg="#2C3E50")
        button_frame.pack(pady=10)

        ttk.Button(
            button_frame, text="–û—Ç–º–µ–Ω–∞", width=15,
            command=self.dialog.destroy,
            style="TButton"
        ).pack(side=tk.LEFT, padx=5)

        save_text = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" if self.employee else "–î–æ–±–∞–≤–∏—Ç—å"
        ttk.Button(
            button_frame, text=save_text, width=15,
            command=self.save,
            style="Publish.TButton"
        ).pack(side=tk.LEFT, padx=5)

    def save(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        fio = self.fio_var.get().strip()
        position = self.position_var.get().strip()
        department = self.department_var.get()
        email = self.email_var.get().strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not fio:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –§–ò–û")
            return

        if not position:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
            return

        if not email:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ email")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        if self.employee:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            success = update_employee(self.employee['id'], fio, position, department, email)
            msg = "–î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
        else:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
            success = add_employee(fio, position, department, email)
            msg = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω"

        if success:
            messagebox.showinfo("–£—Å–ø–µ—Ö", msg)
            self.employees_window.load_employees_list()
            self.dialog.destroy()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")


class FamiliarizationDialog:
    """–î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""

    def __init__(self, parent, document):
        self.document = document

        # –°–æ–∑–¥–∞—ë–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("–õ–∏—Å—Ç –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è")
        self.dialog.geometry("700x600")
        self.dialog.configure(bg="#2C3E50")
        self.dialog.transient(parent)
        self.dialog.grab_set()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        self.employees = load_employees()
        self.employee_vars = {}  # {employee_id: BooleanVar}

        self.create_widgets()

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–∞"""

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(
            self.dialog, text="üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è",
            font=("Arial", 16, "bold"), bg="#37474F", fg="white", pady=10
        ).pack(fill=tk.X)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        from logic import build_filename
        if self.document.is_valid:
            doc_name = build_filename(self.document.typ, self.document.kod,
                                     self.document.version, self.document.year, self.document.title)
        else:
            doc_name = self.document.filename

        doc_frame = tk.LabelFrame(
            self.dialog, text="–î–æ–∫—É–º–µ–Ω—Ç",
            padx=10, pady=10, font=("Arial", 12, "bold"),
            bg="#37474F", fg="white"
        )
        doc_frame.pack(fill=tk.X, padx=10, pady=5)

        tk.Label(
            doc_frame, text=doc_name,
            font=("Arial", 12), bg="#37474F", fg="white", wraplength=650
        ).pack(anchor="w")

        if hasattr(self.document, 'category') and self.document.category:
            tk.Label(
                doc_frame, text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {self.document.category}",
                font=("Arial", 10), bg="#37474F", fg="#B0BEC5"
            ).pack(anchor="w")

        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
        quick_frame = tk.Frame(self.dialog, bg="#455A64", pady=10)
        quick_frame.pack(fill=tk.X, padx=10)

        tk.Label(
            quick_frame, text="–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:",
            font=("Arial", 12, "bold"), bg="#455A64", fg="white"
        ).pack(side=tk.LEFT, padx=10)

        ttk.Button(
            quick_frame, text="–í—Å–µ –§–ë–ü", width=12,
            command=lambda: self.select_by_department("–§–ë–ü"),
            style="TButton"
        ).pack(side=tk.LEFT, padx=5)

        ttk.Button(
            quick_frame, text="–í—Å–µ –ù–ü–§", width=12,
            command=lambda: self.select_by_department("–ù–ü–§"),
            style="TButton"
        ).pack(side=tk.LEFT, padx=5)

        ttk.Button(
            quick_frame, text="–°–Ω—è—Ç—å –≤—Å–µ", width=12,
            command=self.deselect_all,
            style="TButton"
        ).pack(side=tk.LEFT, padx=5)

        ttk.Button(
            quick_frame, text="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ", width=12,
            command=self.select_all,
            style="TButton"
        ).pack(side=tk.LEFT, padx=5)

        # –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
        emp_frame = tk.LabelFrame(
            self.dialog, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è",
            padx=10, pady=10, font=("Arial", 12, "bold"),
            bg="#37474F", fg="white"
        )
        emp_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # Scrollable canvas
        canvas = tk.Canvas(emp_frame, bg="#37474F", highlightthickness=0)
        scrollbar = tk.Scrollbar(emp_frame, orient="vertical", command=canvas.yview, bg="#4A5568")
        self.scrollable_frame = tk.Frame(canvas, bg="#37474F")

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # –°–æ–∑–¥–∞—ë–º –≥–∞–ª–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if not self.employees:
            tk.Label(
                self.scrollable_frame, text="–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ",
                fg="#B0BEC5", font=("Arial", 12, "italic"), bg="#37474F"
            ).pack(pady=20)
        else:
            for emp in self.employees:
                emp_row = tk.Frame(self.scrollable_frame, bg="#4A5568", pady=5, padx=10)
                emp_row.pack(fill=tk.X, pady=2)

                var = tk.BooleanVar(value=False)
                self.employee_vars[emp['id']] = var

                chk = tk.Checkbutton(
                    emp_row, variable=var,
                    font=("Arial", 11), bg="#4A5568", fg="white",
                    selectcolor="#37474F", activebackground="#4A5568",
                    text=""
                )
                chk.pack(side=tk.LEFT, padx=5)

                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
                info_text = f"{emp['fio']} ‚Äî {emp['position']} ({emp['department']})"
                tk.Label(
                    emp_row, text=info_text,
                    font=("Arial", 11), bg="#4A5568", fg="white", anchor="w"
                ).pack(side=tk.LEFT, fill=tk.X, expand=True)

        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(self.dialog, bg="#2C3E50")
        button_frame.pack(pady=10)

        ttk.Button(
            button_frame, text="–û—Ç–º–µ–Ω–∞", width=15,
            command=self.dialog.destroy,
            style="TButton"
        ).pack(side=tk.LEFT, padx=5)

        ttk.Button(
            button_frame, text="–°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç", width=15,
            command=self.create_sheet,
            style="Publish.TButton"
        ).pack(side=tk.LEFT, padx=5)

    def select_by_department(self, department):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"""
        for emp in self.employees:
            if emp['department'] == department:
                self.employee_vars[emp['id']].set(True)

    def deselect_all(self):
        """–°–Ω—è—Ç—å –≤—Å–µ –≥–∞–ª–æ—á–∫–∏"""
        for var in self.employee_vars.values():
            var.set(False)

    def select_all(self):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        for var in self.employee_vars.values():
            var.set(True)

    def create_sheet(self):
        """–°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        selected = [emp for emp in self.employees if self.employee_vars[emp['id']].get()]

        if not selected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            return

        # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        from logic import build_filename
        if self.document.is_valid:
            doc_short = f"{self.document.typ}.{self.document.kod}"
        else:
            doc_short = "–î–æ–∫—É–º–µ–Ω—Ç"

        default_name = f"–õ–∏—Å—Ç_–æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è_{doc_short}_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
        filepath = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏—Å—Ç –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è",
            defaultextension=".xlsx",
            filetypes=[("Excel —Ñ–∞–π–ª—ã", "*.xlsx"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
            initialfile=default_name
        )

        if not filepath:
            return

        # –°–æ–∑–¥–∞—ë–º –ª–∏—Å—Ç
        success = create_familiarization_sheet(self.document, selected, filepath)

        if success:
            messagebox.showinfo("–£—Å–ø–µ—Ö",
                f"–õ–∏—Å—Ç –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–î–æ–∫—É–º–µ–Ω—Ç: {self.document.filename}\n"
                f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(selected)}\n"
                f"–§–∞–π–ª: {filepath}")
            self.dialog.destroy()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞",
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl:\n"
                "pip install openpyxl")